{
   "scope": "text.html.edge source.js",
   "completions":
   [
      {
        "trigger": "props.toAttrs\tSerialize component props to HTML attributes",
        "contents": "\\$props.toAttrs()"
      },
      {
        "trigger": "props.merge\tMerge defaults and serialize props to HTML attributes",
        "contents": "\\$props.merge([$1]).toAttrs()"
      },
      {
        "trigger": "props.only\tSerialize selected component props to HTML attributes",
        "contents": "\\$props.only([$1]).toAttrs()"
      },
      {
        "trigger": "props.except\tSerialize selected component props to HTML attributes",
        "contents": "\\$props.except([$1]).toAttrs()"
      },
      {
        "trigger": "slots\tRender a slot",
        "contents": "\\$slots.${1}"
      },
      {
        "trigger": "filename\tPath to the template file",
        "contents": "\\$filename"
      },
      {
        "trigger": "state\tTemplate state object",
        "contents": "state"
      },
      {
        "trigger": "caller.filename\tComponent caller filename",
        "contents": "\\$caller.filename"
      },
      {
        "trigger": "caller.line\tComponent caller line number",
        "contents": "\\$caller.line"
      },
      {
        "trigger": "caller.col\tComponent caller column number",
        "contents": "\\$caller.col"
      },
      {
        "trigger": "nl2br\tConvert new line to br tags",
        "contents": "nl2br(e(${1:'${2:contents}'}))"
      },
      {
        "trigger": "inspect\tInspect value by pretty printing it",
        "contents": "inspect(${1:value})"
      },
      {
        "trigger": "truncate\tTruncate string after given characters count",
        "contents": "truncate(${1:value}, ${2:100})"
      },
      {
        "trigger": "excerpt\tGenerate plain text excerpt and truncate after given characters count",
        "contents": "excerpt(${1:value}, ${2:100})"
      },
      {
        "trigger": "escape\tEscape HTML markup",
        "contents": "html.escape(${1:'${2:markup}'})"
      },
      {
        "trigger": "safe\tRender HTML markup without escaping it",
        "contents": "html.safe(${1:'${2: markup}'})"
      },
      {
        "trigger": "classNames\tGenerate HTML class string from an array of values",
        "contents": "html.classNames(${1:[${2: markup}]})"
      },
      {
        "trigger": "attrs\tGenerate HTML attributes from an object",
        "contents": "html.attrs(${1:{${2: markup}}})"
      },
      {
        "trigger": "stringify\tStringify a value for serialization",
        "contents": "js.stringify(${1})"
      },
      {
        "trigger": "camelCase\tConvert a string to camelcase",
        "contents": "camelCase(${1:'${2:value}'})"
      },
      {
        "trigger": "snakeCase\tConvert a string to snakeCase",
        "contents": "snakeCase(${1:'${2:value}'})"
      },
      {
        "trigger": "dashCase\tConvert a string to dashCase",
        "contents": "dashCase(${1:'${2:value}'})"
      },
      {
        "trigger": "pascalCase\tConvert a string to pascalCase",
        "contents": "pascalCase(${1:'${2:value}'})"
      },
      {
        "trigger": "capitalCase\tConvert a string to capitalCase",
        "contents": "capitalCase(${1:'${2:value}'})"
      },
      {
        "trigger": "sentenceCase\tConvert a string to sentenceCase",
        "contents": "sentenceCase(${1:'${2:value}'})"
      },
      {
        "trigger": "dotCase\tConvert a string to dotCase",
        "contents": "dotCase(${1:'${2:value}'})"
      },
      {
        "trigger": "noCase\tRemove all sort of casing from a string",
        "contents": "noCase(${1:'${2:value}'})"
      },
      {
        "trigger": "titleCase\tConvert a string to titleCase",
        "contents": "titleCase(${1:'${2:value}'})"
      },
      {
        "trigger": "pluralize\tPluralize a word",
        "contents": "pluralize(${1:value}${2:, optionalCount})"
      },
      {
        "trigger": "sentence\tConvert an array to a sentence",
        "contents": "sentence([${1:'car'}, ${2: 'truck'}, ${3: 'van'}], { separator: ', ', lastSeparator: ', or ' })"
      },
      {
        "trigger": "prettyMs\tPretty print milliseconds to human readable string",
        "contents": "prettyMs(${1:60000})"
      },
      {
        "trigger": "toMs\tConvert human readable expression to milliseconds",
        "contents": "toMs(${1:'1min'})"
      },
      {
        "trigger": "prettyBytes\tPretty print bytes to human readable string",
        "contents": "prettyBytes(${1:1024})"
      },
      {
        "trigger": "toBytes\tConvert human readable expression to bytes",
        "contents": "toBytes(${1:'1MB'})"
      },
      {
        "trigger": "ordinal\tOrdinalize a string or a number value",
        "contents": "ordinal(${1:value})"
      },
      {
        "trigger": "route\tMake URL for a route",
        "contents": "route('${1:routeName}', ${2:[args]})"
      },
      {
        "trigger": "signedRoute\tMake signed URL for a route",
        "contents": "signedRoute('${1:routeName}', ${2:[args]})"
      },
      {
        "trigger": "flashMessages.has\tCheck if a flash message exists",
        "contents": "flashMessages.has('${1:${2:key}}')"
      },
      {
        "trigger": "flashMessages.get\tGet flash message value",
        "contents": "flashMessages.get('${1:${2:key}}', ${3:'${4:defaultValue}'})"
      },
      {
        "trigger": "flashMessages.all\tInspect all messages",
        "contents": "inspect(flashMessages.all())"
      },
      {
        "trigger": "asset\tGet path to a frontend asset",
        "contents": "asset('${1:filePath}')"
      },
      {
        "trigger": "csrfField\tAdd csrfField input field to form",
        "contents": "csrfField()"
      },
      {
        "trigger": "cspNonce\tUse csp nonce on script tag",
        "contents": "cspNonce"
      },
      {
        "trigger": "auth.isAuthenticated\tFind if user is authenticated during the current request",
        "contents": "auth.isAuthenticated"
      },
      {
        "trigger": "auth.user\tGet auth user",
        "contents": "auth.user"
      },
      {
        "trigger": "app\tReference to application instance",
        "contents": "app"
      },
      {
        "trigger": "config\tGet config value",
        "contents": "config('${1:key}')"
      },
      {
        "trigger": "t\tTranslate message using i18n",
        "contents": "t('${1:key}', ${2:{args}})"
      }
   ]
}
